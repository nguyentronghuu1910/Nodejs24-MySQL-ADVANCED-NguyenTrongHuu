-- CREATE TABLE USERS --

CREATE TABLE users(
	id INT PRIMARY KEY AUTO_INCREMENT,
	username VARCHAR(255),
	created_at DATE
)

INSERT INTO users
VALUES
(1, 'NguyenTrongHuu', '2012-10-19 02:03:19'),
(2, 'HuynhDaiNguyen', '2018-02-28 07:06:38'),
(3, 'PhamHongThanh', '2017-07-12 18:03:22'),
(4, 'DuongNgocHung', '2015-11-19 02:03:19'),
(5, 'NguyenVietHai', '2021-09-22 01:13:28'),
(6, 'NguyenTheMan', '2022-01-19 21:29:42'),
(7, 'NguyenVietMit', '2022-11-07 01:29:39'),
(8, 'NguyenThiHuyenTran', '2012-01-01 00:13:22'),
(9, 'NguyenVanNghia', '2021-12-30 01:20:10'),
(10, 'NguyenHoangLong', '2021-01-12 10:23:28'),
(11, 'LeThiYenLinh', '2017-12-25 11:11:22')

-- CREATE TABLE PHOTOS --

CREATE TABLE photos(
	id INT PRIMARY KEY AUTO_INCREMENT,
	images_url VARCHAR(255),
	user_id INT,
	created_at DATE,
	FOREIGN KEY (user_id) REFERENCES users(id)
)

INSERT INTO photos 
VALUES
(1, 'trongHuu.png', 1, '2022-10-29 04:03:19'),
(2, 'daiNguyen.png',2, '2021-12-20 12:02:20'),
(3, 'hongThanh.png', 3, '2022-07-19 20:14:12'),
(4, 'ngocHung.png', 4, '2020-01-17 01:12:02'),
(5, 'vietHai.png', 5, '2022-12-22 22:29:30'),
(6, 'theMan.png',6, '2022-10-29 21:22:23'),
(7, 'vietMit.png', 7, '2019-10-22 21:00:30'),
(8, 'huyenTran.png', 8, '2021-12-20 22:29:25')

-- CREATE TABLE COMMENTS --

CREATE TABLE comments(
	id INT AUTO_INCREMENT,
	comment_text VARCHAR(255),
	user_id INT,
	photo_id INT,
	created_at TIMESTAMP DEFAULT NOW(),
	PRIMARY KEY (id, user_id, photo_id),
	FOREIGN KEY (user_id) REFERENCES users(id),	
	FOREIGN KEY (photo_id) REFERENCES photos(id)
)

INSERT INTO comments
VALUES
('hello Hải', 1, 1,'2022-11-12 00:20:13'),
('hello Hữu', 1, 3,'2022-02-12 12:52:22'),
('hello Thanh', 2, 6,'2022-10-12 12:38:02'),
('hello Nguyên', 1, 1,'2022-09-10 22:30:00'),
('hello Mẫn', 1, 1,'2022-02-16 00:12:13'),
('hello Hùng', 1, 1,'2022-01-22 00:03:20')

-- CREATE TABLE LIKES --

CREATE TABLE likes(
	photo_id INT,
	user_id INT,
	created_at DATE,
	FOREIGN KEY (user_id) REFERENCES users(id),	
	FOREIGN KEY (photo_id) REFERENCES photos(id)
)

INSERT INTO likes
VALUES
(1, 1, '2019-12-20 22:12:40'),
(2, 2, '2022-12-20 22:12:41'),
(3, 3, '2021-12-20 22:12:42'),
(4, 4, '2020-12-20 22:12:43'),
(5, 1, '2022-01-20 22:12:44'),
(6, 2, '2018-12-20 22:12:45'),
(1, 3, '2012-12-20 22:12:46')

-- CREATE TABLE TAGS --

CREATE TABLE tags(
	id INT PRIMARY KEY AUTO_INCREMENT,
	tag_name VARCHAR(255),
	created_at DATE
)

INSERT INTO tags
VALUES
(1, 'Huu ne', '2022-12-01 18-20-50'),
(2, 'Nguyen ne', '2022-12-08 18-20-51'),
(3, 'Thanh ne', '2022-12-09 18-20-52'),
(4, 'Hai ne', '2022-12-06 18-20-53'),
(5, 'Hung ne', '2022-12-18 18-20-54'),
(6, 'Truong ne', '2022-12-22 18-20-55'),
(7, 'Tran ne', '2022-12-28 18-20-56')

-- CREATE TABLE PHOTO_TAGS --

CREATE TABLE photo_tags(
	photo_id INT,
	tag_id INT,
	FOREIGN KEY (photo_id) REFERENCES photos(id),	
	FOREIGN KEY (tag_id) REFERENCES tags(id)
)

INSERT INTO photo_tags
VALUES (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (1, 2), (2, 3), (4, 1), (3, 4), (6, 2), (5, 5)

-- CREATE FOLLOWS --

CREATE TABLE follows(
	follower_id INT,
	followee_id INT,
	created_at DATE
)

INSERT INTO follows
VALUES 
(1, 2, '2019-10-19 22:22:20'),
(1, 3, '2019-10-20 22:22:21'),
(1, 4, '2019-10-21 22:22:19'),
(2, 1, '2019-10-22 22:22:24'),
(3, 3, '2019-10-23 22:22:23'),
(4, 2, '2019-10-24 22:22:27'),
(5, 6, '2019-10-25 22:22:29'),
(2, 1, '2019-10-26 22:22:30')

-- #1. Find the five longest-running app users -- done

SELECT * FROM users ORDER BY (created_at) ASC LIMIT 5;


-- #2. Find the 2 days of the week with the most registrations -- done

-- the number of registrations by day of the week --
SELECT COUNT(created_at) as mount_in_week, 
DAYNAME(created_at) AS DAY FROM users 
GROUP BY DAY
-- 2 days a week with the most registrations --
SELECT COUNT(created_at) AS mount_in_week, 
DAYNAME(created_at) AS DAY FROM users 
GROUP BY DAY
ORDER BY 
mount_in_week DESC LIMIT 2;


-- #3. Identify inactive users (users who don't post pictures) -- done

SELECT * FROM photos
RIGHT JOIN users ON photos.user_id = users.id
WHERE user_id is NULL


-- #4. determine the photo with the most likes and the user created it -- done

-- SELECT 
-- likes.photo_id,
-- photos.images_url,
-- users.username,
-- COUNT(likes.photo_id) AS total_photos
-- FROM likes
-- JOIN photos ON likes.photo_id = photos.id
-- JOIN users ON photos.user_id = users.id
-- GROUP BY
-- photo_id HAVING total_photos ORDER BY total_photos DESC LIMIT 1;

SELECT * FROM
(SELECT COUNT(user_id) AS like_count, photo_id
FROM likes
GROUP BY photo_id
ORDER BY like_count     
DESC
LIMIT 1) AS photo_most_like
JOIN photos ON photos.id = photo_most_like.photo_id
JOIN users ON photos.user_id = users.id;


-- #5. Find the average number of photos per person -- done

SELECT COUNT(photos.id)
AS total_pictures,
COUNT(DISTINCT photos.user_id)
AS total_users,
COUNT(DISTINCT photos.user_id)/COUNT(photos.id) AS average FROM photos 


-- #6. Find 5 commonly used hashtags -- done

SELECT * FROM tags 
JOIN (SELECT tag_id, 
COUNT(photo_id) AS total_tagged_times FROM photo_tags
GROUP BY tag_id 
ORDER BY total_tagged_times DESC LIMIT 5) AS top_5_people_tagged
WHERE tags.id = top_5_people_tagged.tag_id


-- #7. Find users who liked a photo --

SELECT * FROM likes 
JOIN users ON likes.user_id = users.id
ORDER BY photo_id